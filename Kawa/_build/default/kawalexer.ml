# 1 "kawalexer.mll"
 

  open Lexing
  open Kawaparser

  exception Error of string

  let keyword_or_ident =
  let h = Hashtbl.create 17 in
  List.iter (fun (s, k) -> Hashtbl.add h s k)
    [ "int",      T_INT;   
      "print",    PRINT;
      "main",     MAIN;
      "true",     TRUE;
      "false",    FALSE;
      "this",     THIS;
      "bool",     BOOL;
      "void",     VOID;
      "var",      VAR;
      "attribute",ATTRIBUTE;
      "method",   METHOD;
      "class",    CLASS;
      "new",      NEW;
      "if",       IF;
      "while",    WHILE;
      "else",     ELSE;
      "return",   RETURN;
      "extends",  EXTENDS;
    ] ;
  fun s ->
    try  Hashtbl.find h s
    with Not_found -> IDENT(s)
        

# 37 "kawalexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\224\255\225\255\002\000\229\255\001\000\002\000\003\000\
    \011\000\239\255\241\255\004\000\243\255\244\255\245\255\246\255\
    \247\255\248\255\249\255\079\000\025\000\035\000\024\000\002\000\
    \255\255\252\255\002\000\253\255\235\255\006\000\007\000\227\255\
    \226\255\231\255\232\255\230\255\228\255\027\000\253\255\254\255\
    \023\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\030\000\255\255\030\000\022\000\021\000\
    \018\000\255\255\255\255\013\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\005\000\004\000\015\000\017\000\001\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\019\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\026\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
    \255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\024\000\023\000\027\000\023\000\000\000\023\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\011\000\023\000\000\000\000\000\004\000\005\000\035\000\
    \017\000\016\000\009\000\010\000\012\000\021\000\013\000\022\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\029\000\018\000\006\000\008\000\007\000\034\000\
    \033\000\028\000\025\000\032\000\031\000\040\000\041\000\026\000\
    \030\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\000\000\000\000\019\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\015\000\003\000\014\000\036\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\023\000\026\000\000\000\255\255\023\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\023\000\255\255\255\255\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\008\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\011\000\022\000\029\000\030\000\037\000\040\000\022\000\
    \008\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\019\000\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\026\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\037\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 42 "kawalexer.mll"
                      ( new_line lexbuf; token lexbuf )
# 169 "kawalexer.ml"

  | 1 ->
# 43 "kawalexer.mll"
                      ( token lexbuf )
# 174 "kawalexer.ml"

  | 2 ->
# 45 "kawalexer.mll"
                         ( new_line lexbuf; token lexbuf )
# 179 "kawalexer.ml"

  | 3 ->
# 46 "kawalexer.mll"
                         ( comment lexbuf; token lexbuf )
# 184 "kawalexer.ml"

  | 4 ->
let
# 48 "kawalexer.mll"
              n
# 190 "kawalexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "kawalexer.mll"
                 ( INT(int_of_string n) )
# 194 "kawalexer.ml"

  | 5 ->
let
# 49 "kawalexer.mll"
             id
# 200 "kawalexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 49 "kawalexer.mll"
                 ( keyword_or_ident id )
# 204 "kawalexer.ml"

  | 6 ->
# 51 "kawalexer.mll"
         ( SEMI )
# 209 "kawalexer.ml"

  | 7 ->
# 52 "kawalexer.mll"
         ( LPAR )
# 214 "kawalexer.ml"

  | 8 ->
# 53 "kawalexer.mll"
         ( RPAR )
# 219 "kawalexer.ml"

  | 9 ->
# 54 "kawalexer.mll"
         ( BEGIN )
# 224 "kawalexer.ml"

  | 10 ->
# 55 "kawalexer.mll"
         ( END )
# 229 "kawalexer.ml"

  | 11 ->
# 56 "kawalexer.mll"
         ( DOT )
# 234 "kawalexer.ml"

  | 12 ->
# 57 "kawalexer.mll"
         ( COMMA )
# 239 "kawalexer.ml"

  | 13 ->
# 59 "kawalexer.mll"
         ( NOT )
# 244 "kawalexer.ml"

  | 14 ->
# 62 "kawalexer.mll"
         ( ADD )
# 249 "kawalexer.ml"

  | 15 ->
# 63 "kawalexer.mll"
         ( SUB )
# 254 "kawalexer.ml"

  | 16 ->
# 64 "kawalexer.mll"
         ( MUL )
# 259 "kawalexer.ml"

  | 17 ->
# 65 "kawalexer.mll"
         ( DIV )
# 264 "kawalexer.ml"

  | 18 ->
# 66 "kawalexer.mll"
         ( AS )
# 269 "kawalexer.ml"

  | 19 ->
# 67 "kawalexer.mll"
          ( EQ )
# 274 "kawalexer.ml"

  | 20 ->
# 68 "kawalexer.mll"
          ( NEQ )
# 279 "kawalexer.ml"

  | 21 ->
# 69 "kawalexer.mll"
         ( GT )
# 284 "kawalexer.ml"

  | 22 ->
# 70 "kawalexer.mll"
         ( LT )
# 289 "kawalexer.ml"

  | 23 ->
# 71 "kawalexer.mll"
          ( LE )
# 294 "kawalexer.ml"

  | 24 ->
# 72 "kawalexer.mll"
          ( GE )
# 299 "kawalexer.ml"

  | 25 ->
# 73 "kawalexer.mll"
          ( AND )
# 304 "kawalexer.ml"

  | 26 ->
# 74 "kawalexer.mll"
         ( REM )
# 309 "kawalexer.ml"

  | 27 ->
# 75 "kawalexer.mll"
          ( OR )
# 314 "kawalexer.ml"

  | 28 ->
# 78 "kawalexer.mll"
          ( EQS )
# 319 "kawalexer.ml"

  | 29 ->
# 79 "kawalexer.mll"
          ( NEQS )
# 324 "kawalexer.ml"

  | 30 ->
# 82 "kawalexer.mll"
         ( raise (Error ("unknown character : " ^ lexeme lexbuf)) )
# 329 "kawalexer.ml"

  | 31 ->
# 83 "kawalexer.mll"
         ( EOF )
# 334 "kawalexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 37
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 86 "kawalexer.mll"
         ( () )
# 346 "kawalexer.ml"

  | 1 ->
# 87 "kawalexer.mll"
         ( comment lexbuf )
# 351 "kawalexer.ml"

  | 2 ->
# 88 "kawalexer.mll"
         ( raise (Error "unterminated comment") )
# 356 "kawalexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

